1
00:00:00,540 --> 00:00:06,570
In this video, we're going to look at how we can manipulate files in fast API.

2
00:00:06,780 --> 00:00:15,690
So our goal is going to be to be able to send a file to our fast API, receive it on the backend and

3
00:00:15,690 --> 00:00:21,570
perform some sort of operation, anything that we want to do with those particular files.

4
00:00:22,080 --> 00:00:26,370
So basically, files are declared similarly to form fields.

5
00:00:26,370 --> 00:00:29,850
They are in fact form fields and the system.

6
00:00:29,850 --> 00:00:38,220
The browser will allow us to simply pass the URL of a file to our API and on the API side, we will

7
00:00:38,700 --> 00:00:41,430
perform whatever manipulation we require.

8
00:00:41,850 --> 00:00:42,960
So how do we do that?

9
00:00:42,990 --> 00:00:49,740
Well, we simply declare the file as bytes, OK, and we set it as a default file.

10
00:00:49,770 --> 00:00:56,370
This is actually quite important so that the system knows that we are trying to send a file as bytes

11
00:00:56,550 --> 00:00:57,060
here.

12
00:00:57,660 --> 00:01:03,960
Of course, if you know that you are receiving a string, you can convert those bytes to string or simply

13
00:01:03,960 --> 00:01:06,450
use that as you require.

14
00:01:07,020 --> 00:01:14,290
And then this particular object file is used to store files in memory.

15
00:01:14,320 --> 00:01:19,590
OK, so we do have a limited space in memory, so that will be quite important.

16
00:01:20,400 --> 00:01:27,930
This will be useful for small files, something that's not very big, only to be stored in memory.

17
00:01:28,290 --> 00:01:34,620
So with that introduction, we're going to go into our code and see how we can implement this functionality

18
00:01:34,620 --> 00:01:37,200
to send a file to our API.

19
00:01:38,130 --> 00:01:38,430
Right.

20
00:01:38,430 --> 00:01:44,970
So I am inside the router folder and I'm going to create a new file here, and I'm going to call it

21
00:01:45,030 --> 00:01:46,920
File Dot P Y.

22
00:01:48,600 --> 00:01:57,840
OK, now here I'm going to create a router, so from fast API import API router.

23
00:01:59,520 --> 00:02:08,070
Then let's go ahead and declare our router as an API router, and we're going to provide here our prefix.

24
00:02:08,789 --> 00:02:19,710
As for slash file and the tags as a list with one one entry, a file.

25
00:02:20,100 --> 00:02:22,520
OK, so we have our file now.

26
00:02:22,530 --> 00:02:29,790
Of course, we need to go into may not be why and added here, so I'm going to import it file and I'm

27
00:02:29,790 --> 00:02:31,950
going to add it just somewhere below.

28
00:02:32,280 --> 00:02:40,110
Authentication after that include writer and file dot router.

29
00:02:40,170 --> 00:02:43,080
OK, so that's all for the main.

30
00:02:43,350 --> 00:02:46,000
Now let's go ahead and create an endpoint.

31
00:02:46,020 --> 00:02:55,840
We're going to hold this file and we're going to simply get the file that the user wants to send us.

32
00:02:55,860 --> 00:02:58,530
OK, so router dot get.

33
00:03:00,880 --> 00:03:06,850
Sorry, this is going to be a post because we need to send form elements here, so I'm going to say

34
00:03:06,850 --> 00:03:08,020
forward slash file.

35
00:03:09,040 --> 00:03:16,420
I'm going to define a function, get on the score file, and here I will receive a parameter file of

36
00:03:16,420 --> 00:03:26,350
type bytes that is going to be, by default, a file, and we need to import that file here.

37
00:03:26,360 --> 00:03:29,380
So from fast API import file.

38
00:03:30,070 --> 00:03:30,430
All right.

39
00:03:30,430 --> 00:03:33,790
So we have our function definition now, the implementation.

40
00:03:34,480 --> 00:03:38,110
We're going to actually use this file as a string.

41
00:03:38,110 --> 00:03:42,580
So we're going to assume that we get text in this file.

42
00:03:42,660 --> 00:03:48,880
OK, so I'm going to say here content is going to be file dot decode.

43
00:03:49,420 --> 00:03:58,360
So I'm going to decode these bytes that we receive as UTF Dash eight, UTF eight is going to be a simple,

44
00:03:58,360 --> 00:03:59,260
plain text.

45
00:03:59,960 --> 00:04:07,000
OK, now I have already created a file that will be used here, and it has a few different lines of

46
00:04:07,000 --> 00:04:13,780
text, so I'm going to separate those and just print them out in the return object.

47
00:04:14,110 --> 00:04:19,149
So I'm going to say Lines is going to be content dot split.

48
00:04:21,000 --> 00:04:23,650
Over backslash.

49
00:04:24,390 --> 00:04:29,220
OK, so that's going to split my content into different lines.

50
00:04:29,460 --> 00:04:30,930
And then if I return.

51
00:04:32,510 --> 00:04:36,290
I can return, for instance, lines as lines.

52
00:04:37,420 --> 00:04:47,470
OK, so that should be all good if we send a small text file that will be split into its its lines and

53
00:04:47,470 --> 00:04:49,990
then the lines will be returned in the object.

54
00:04:50,050 --> 00:04:52,090
OK, so save that.

55
00:04:52,240 --> 00:04:59,620
Go back to the documentation and refresh, and we have our new post method in that I'm going to try

56
00:04:59,620 --> 00:05:00,030
it out.

57
00:05:00,040 --> 00:05:07,180
You can see that it's multipart form data, so we need to select the file here, and I have a test file

58
00:05:07,390 --> 00:05:09,700
that simply contains three lines of text.

59
00:05:10,480 --> 00:05:18,730
If I execute that, that is being received out on the back and sides split into lines and I get the

60
00:05:18,730 --> 00:05:20,560
output as a list.

61
00:05:20,980 --> 00:05:22,690
OK, so I just get Helloworld.

62
00:05:23,020 --> 00:05:23,770
Hi, how are you?

63
00:05:23,770 --> 00:05:25,030
And this is a test file.

64
00:05:25,450 --> 00:05:33,910
OK, so basically at this point, you can use these bytes for whatever your application your functionality

65
00:05:33,910 --> 00:05:34,690
requires.

66
00:05:34,730 --> 00:05:37,420
OK, so you can do anything you like with those bytes.

67
00:05:37,750 --> 00:05:45,280
Now, keep in mind that, as I said, this is stored in memory, so the file must be quite small.

68
00:05:45,280 --> 00:05:49,150
Otherwise the memory will fill up and you will get errors.

69
00:05:50,050 --> 00:05:53,530
And also, this is quite limiting in what you can do.

70
00:05:53,560 --> 00:06:00,670
You get simply a bunch of bytes and it's up to you to decide how to process those bytes.

71
00:06:00,940 --> 00:06:06,130
Now, actually, Fast API provides us a better way to handle files.

72
00:06:06,730 --> 00:06:12,340
This is just the most basic way for basic functionality, but we have other options and we will see

73
00:06:12,610 --> 00:06:15,130
that option in the next video.

